import{_ as e,o as i,c as l,e as a}from"./app-n0xwCUxG.js";const n={},o=a(`<h2 id="第-1-章-zookeeper-入门" tabindex="-1"><a class="header-anchor" href="#第-1-章-zookeeper-入门" aria-hidden="true">#</a> 第 1 章 Zookeeper 入门</h2><h3 id="_1-1-概述" tabindex="-1"><a class="header-anchor" href="#_1-1-概述" aria-hidden="true">#</a> 1.1 概述</h3><ul><li>ch1:Zookeeper 的工作机制是怎样？ <ul><li>从设计模式角度来理解：是一个基于观察者模式设计的分布式服务管理框架 ， 它负责存储和管理大家都关心的数据 ， 然后接受观察者的注册 ， 一旦这些数据的状态发生变化 ， Zookeeper 就将负责通知已经在 Zookeeper 上注册的那些观察者做出相应的反应</li><li><img src="https://img.shiqi-lu.tech/20211109141434.png" alt=""></li></ul></li></ul><h3 id="_1-2-特点" tabindex="-1"><a class="header-anchor" href="#_1-2-特点" aria-hidden="true">#</a> 1.2 特点</h3><ul><li>ch1:Zookeeper的特点有哪些？ <ul><li>1.Zookeeper：一个领导者（Leader），多个跟随者（Follower）组成的集群</li><li>2.集群中只要有半数以上 节点存活， Zookeeper集群就能正常服务 。所以Zookeeper适合安装奇数台服务器</li><li>3.全局数据一致：每个Server保存一份相同的数据副本，Client无论连接到哪个Server，数据都是一致的</li><li>4.更新请求顺序执行，来自同一个Client的更新请求按其发送顺序依次执行</li><li>5.数据更新原子性，一次数据更新要么成功，要么失败</li><li>6.实时性，在一定时间范围内，Client能读到最新数据</li><li><img src="https://img.shiqi-lu.tech/20211109141713.png" alt=""></li></ul></li></ul><h3 id="_1-3-数据结构" tabindex="-1"><a class="header-anchor" href="#_1-3-数据结构" aria-hidden="true">#</a> 1.3 数据结构</h3><ul><li>ch1:Zookeeper 的内部数据结构是什么？ <ul><li>ZooKeeper 数据模型的结构与 Unix 文件系统很类似，整体上可以看作是一棵树，每个节点称做一个 ZNode。每一个 ZNode 默认能够存储 1MB 的数据，每个 ZNode 都可以通过其路径唯一标识</li><li><img src="https://img.shiqi-lu.tech/20211109142014.png" alt=""></li></ul></li></ul><h3 id="_1-4-应用场景" tabindex="-1"><a class="header-anchor" href="#_1-4-应用场景" aria-hidden="true">#</a> 1.4 应用场景</h3><ul><li>ch1:Zookeeper 有哪些应用场景？ <ul><li>统一命名服务：在分布式环境下 ， 经常需要对应用/服务进行统一命名，便于识别 <ul><li><img src="https://img.shiqi-lu.tech/20211109142301.png" alt=""></li></ul></li><li>统一配置管理 <ul><li>分布式环境下，配置文件同步非常常见 <ul><li>1.一般要求一个集群中 ，所有节点的配置信息是一致的，比如 Kafka 集群</li><li>2.对配置文件修改后 ，希望能够快速同步到各个节点上</li></ul></li><li>配置管理可交由ZooKeeper实现 <ul><li>1.可将配置信息写入ZooKeeper上的一个Znode</li><li>2.各个客户端服务器监听这个Znode</li><li>3.一旦 Znode 中的数据被修改， ZooKeeper 将通知各个客户端服务器</li></ul></li><li><img src="https://img.shiqi-lu.tech/20211109143022.png" alt=""></li></ul></li><li>统一集群管理 <ul><li>分布式环境中，实时掌握每个节点的状态是必要的 <ul><li>1.可根据节点实时状态做出一些调整</li></ul></li><li>ZooKeeper可以实现实时监控节点状态变化 <ul><li>1.可将节点信息写入 ZooKeeper 上的一个 ZNode</li><li>2.监听这个ZNode可获取它的实时状态变化</li></ul></li><li><img src="https://img.shiqi-lu.tech/20211109143216.png" alt=""></li></ul></li><li>服务器动态上下线：客户端能实时洞察到服务器上下线的变化 <ul><li><img src="https://img.shiqi-lu.tech/20211109143328.png" alt=""></li></ul></li><li>软负载均衡：在Zookeeper中记录每台服务器的访问数，让访问数最少的服务器去处理最新的客户端请求 <ul><li><img src="https://img.shiqi-lu.tech/20211109143438.png" alt=""></li></ul></li></ul></li></ul><h3 id="_1-5-下载地址" tabindex="-1"><a class="header-anchor" href="#_1-5-下载地址" aria-hidden="true">#</a> 1.5 下载地址</h3><ul><li>https://zookeeper.apache.org/</li></ul><h2 id="第-2-章-zookeeper-本地安装" tabindex="-1"><a class="header-anchor" href="#第-2-章-zookeeper-本地安装" aria-hidden="true">#</a> 第 2 章 Zookeeper 本地安装</h2><h3 id="_2-1-本地模式安装" tabindex="-1"><a class="header-anchor" href="#_2-1-本地模式安装" aria-hidden="true">#</a> 2.1 本地模式安装</h3><ul><li>ch2:Zookeeper本地模式安装 <ul><li>1.安装前准备 <ul><li>1.安装SDK</li><li>2.下载zk 安装包</li><li>3.解压：<code>hduser@k8s01:~$ tar xf apache-zookeeper-3.7.1-bin.tar.gz -C /opt/module/</code></li><li>4.修改名称：<code>hduser@k8s01:/opt/module$ mv apache-zookeeper-3.7.1-bin zookeeper-3.7.1</code></li></ul></li><li>2.配置修改 <ul><li>将<code>/opt/module/zookeeper-3.7.1/conf</code>目录下的 zoo_sample.cfg 修改为 zoo.cfg</li><li>修改zoo.cfg的dataDIr路径为：<code>/opt/module/zookeeper-3.7.1/zkData</code></li><li>创建dataDir：<code>mkdir /opt/module/zookeeper-3.7.1/zkData</code></li></ul></li><li>3.操作zk</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#启动</span>
hduser@k8s01:/opt/module/zookeeper-3.7.1/bin$ ./zkServer.sh start
ZooKeeper JMX enabled by default
Using config: /opt/module/zookeeper-3.7.1/bin/<span class="token punctuation">..</span>/conf/zoo.cfg
Starting zookeeper <span class="token punctuation">..</span>. STARTED

<span class="token comment">#查看是否启动</span>
hduser@k8s01:/opt/module/zookeeper-3.7.1/bin$ jps
<span class="token number">2060208</span> QuorumPeerMain

<span class="token comment">#查看状态</span>
hduser@k8s01:/opt/module/zookeeper-3.7.1/bin$ ./zkServer.sh status
ZooKeeper JMX enabled by default
Using config: /opt/module/zookeeper-3.7.1/bin/<span class="token punctuation">..</span>/conf/zoo.cfg
Client port found: <span class="token number">2181</span>. Client address: localhost. Client SSL: false.
Mode: standalone

<span class="token comment">#启动客户端</span>
hduser@k8s01:~$ zkCli.sh

<span class="token comment">#停止客户端</span>
hduser@k8s01:~$ zkServer.sh stop
ZooKeeper JMX enabled by default
Using config: /opt/module/zookeeper-3.7.1/bin/<span class="token punctuation">..</span>/conf/zoo.cfg
Stopping zookeeper <span class="token punctuation">..</span>. STOPPED
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2-2-配置文件-zoo-cfg-参数解读" tabindex="-1"><a class="header-anchor" href="#_2-2-配置文件-zoo-cfg-参数解读" aria-hidden="true">#</a> 2.2 配置文件 zoo.cfg 参数解读</h3><ul><li>tickTime = 2000：通信心跳时间，Zookeeper服务器与客户端心跳时间，单位毫秒</li><li>initLimit = 10：Leader和Follower初始连接时能容忍的最多心跳数(tickTime的数量)</li><li>syncLimit = 5：LF同步通信时限 <ul><li>Leader和Follower之间通信时间如果超过syncLimit * tickTime，Leader认为Follwer死 掉，从服务器列表中删除Follwer</li></ul></li><li>dataDir：保存Zookeeper中的数据</li><li>clientPort = 2181：客户端连接端口，通常不做修改</li></ul><h2 id="第-3-章-zookeeper-集群操作" tabindex="-1"><a class="header-anchor" href="#第-3-章-zookeeper-集群操作" aria-hidden="true">#</a> 第 3 章 Zookeeper 集群操作</h2><h3 id="_3-1-集群操作" tabindex="-1"><a class="header-anchor" href="#_3-1-集群操作" aria-hidden="true">#</a> 3.1 集群操作</h3><ul><li>ch3:SID、ZXID、Epoch 分别是什么？ <ul><li>SID：服务器ID。用来唯一标识一台ZooKeeper集群中的机器，每台机器不能重复，和myid一致</li><li>ZXID：事务ID。ZXID是一个事务ID，用来标识一次服务器状态的变更。在某一时刻， 集群中的每台机器的ZXID值不一定完全一致，这和ZooKeeper服务器对于客户端“更新请求”的处理逻辑有关</li><li>Epoch：每个Leader任期的代号。没有Leader时同一轮投票过程中的逻辑时钟值是相同的。每投完一次票这个数据就会增加</li></ul></li><li>ch3:Zookeeper选举机制——第一次启动是怎样的？ <ul><li><img src="https://img.shiqi-lu.tech/20211109151707.png" alt=""></li><li>1.服务器 1 启动，发起一次选举。服务器 1 投自己一票 。 此时服务器 1 票数一票，不够半数以上（ 3 票 ），选举无法完成，服务器 1 状态保持为 LOOKING</li><li>2.服务器2启动，再发起一次选举。服务器1和2分别投自己一票并交换选票信息：此时服务器1发现服务器2的myid比自己目前投票推举的（服务器1）大，更改选票为推举服务器2。此时服务器1票数0票，服务器2票数2票，没有半数以上结果，选举无法完成，服务器1，2状态保持LOOKING</li><li>3.服务器3启动，发起一次选举。此时服务器1和2都会更改选票为服务器3。此次投票结果：服务器1为0票，服务器2为0票，服务器3为3票。此时服务器3的票数已经超过半数，服务器3当选Leader。服务器1，2更改状态为FOLLOWING，服务器3更改状态为LEADING</li><li>4.服务器4启动，发起一次选举。此时服务器1，2，3已经不是LOOKING状态，不会更改选票信息。交换选票信息结果：服务器3为3票，服务器4为1票。此时服务器4服从多数，更改选票信息为服务器3，并更改状态为FOLLOWING</li><li>5.服务器5启动，同4一样当小弟</li></ul></li><li>ch3:Zookeeper选举机制——非第一次启动是怎样的？ <ul><li><img src="https://img.shiqi-lu.tech/20211109152747.png" alt=""></li><li>当ZooKeeper集群中的一台服务器出现以下两种情况之一时，就会开始进入Leader选举： <ul><li>服务器初始化启动</li><li>服务器运行期间无法和Leader保持连接</li></ul></li><li>而当一台机器进入Leader选举流程时，当前集群也可能会处于以下两种状态： <ul><li>集群中本来就已经存在一个Leader <ul><li>对于第一种已经存在Leader的情况，机器试图去选举Leader时，会被告知当前服务器的Leader信息，对于该机器来说，仅仅需要和Leader机器建立连 接，并进行状态同步即可</li></ul></li><li>集群中确实不存在Leader <ul><li>假设ZooKeeper由5台服务器组成，SID分别为1、2、3、4、5，ZXID分别为8、8、8、7、7，并且此时SID为3的服务器是Leader。某一时刻， 3和5服务器出现故障，因此开始进行Leader选举</li><li><img src="https://img.shiqi-lu.tech/20211109153827.png" alt=""></li></ul></li></ul></li></ul></li><li>ch3:选举Leader规则是什么 <ul><li>1.EPOCH大的直接胜出</li><li>2.EPOCH相同， 事务id大的胜出</li><li>3.事务id相同， 服务器id大的胜出</li></ul></li></ul><h3 id="_3-2-客户端命令行操作" tabindex="-1"><a class="header-anchor" href="#_3-2-客户端命令行操作" aria-hidden="true">#</a> 3.2 客户端命令行操作</h3><h4 id="_3-2-1-命令行语法" tabindex="-1"><a class="header-anchor" href="#_3-2-1-命令行语法" aria-hidden="true">#</a> 3.2.1 命令行语法</h4><ul><li>语法表 <ul><li><img src="https://img.shiqi-lu.tech/20211109144016.png" alt=""></li></ul></li><li>启动客户端 <ul><li><code>bin/zkCli.sh -server hadoop102:2181</code></li></ul></li></ul><h4 id="_3-2-2-znode-节点数据信息" tabindex="-1"><a class="header-anchor" href="#_3-2-2-znode-节点数据信息" aria-hidden="true">#</a> 3.2.2 znode 节点数据信息</h4><ul><li>查看当前znode中所包含的内容 <ul><li><code>ls /</code></li></ul></li><li>查看当前节点详细数据</li></ul><div class="language-plain line-numbers-mode" data-ext="plain"><pre class="language-plain"><code>[zk: hadoop102:2181(CONNECTED) 5] ls -s /
[zookeeper]cZxid = 0x0
ctime = Thu Jan 01 08:00:00 CST 1970
mZxid = 0x0
mtime = Thu Jan 01 08:00:00 CST 1970
pZxid = 0x0
cversion = -1
dataVersion = 0
aclVersion = 0
ephemeralOwner = 0x0
dataLength = 0
numChildren = 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>- 1.czxid：创建节点的事务 zxid
    - 每次修改ZooKeeper状态都会产生一个ZooKeeper事务ID。事务ID是ZooKeeper中所有修改总的次序。每次修改都有唯一的zxid,如果zxid1小于zxid2,那么zxid1在zxid2之前发生
- 2.ctime：znode 被创建的毫秒数（从 1970 年开始）
- 3.mzxid：znode 最后更新的事务 zxid
- 4.mtime：znode 最后修改的毫秒数（从 1970 年开始）
- 5.pZxid：znode 最后更新的子节点 zxid
- 6.cversion：znode 子节点变化号，znode 子节点修改次数
- 7.dataversion：znode 数据变化号
- 8.aclVersion：znode 访问控制列表的变化号
- 9.ephemeralOwner：如果是临时节点，这个是 znode 拥有者的 session id。如果不是 临时节点则是 0
- 10.dataLength：znode 的数据长度
- 11.numChildren：znode 子节点数量
</code></pre><h4 id="_3-2-3-节点类型-持久-短暂-有序号-无序号" tabindex="-1"><a class="header-anchor" href="#_3-2-3-节点类型-持久-短暂-有序号-无序号" aria-hidden="true">#</a> 3.2.3 节点类型（持久/短暂/有序号/无序号）</h4><ul><li>有哪些节点类型？ <ul><li>持久化目录节点：客户端与Zookeeper断开连接后，该节点依旧存在</li><li>持久化顺序编号目录节点：客户端与Zookeeper 断开连接后 ，该节点依旧存 在，只是Zookeeper给该节点名称进行顺序编号</li><li>临时目录节点：客户端与Zookeeper断开连接后，该节点被删除</li><li>临时顺序编号目录节点：客户端与 Zookeeper 断开连 接后 ， 该节点被删除，只是Zookeeper给该节点名称进行顺序编号</li><li>说明：创建znode时设置顺序标识，znode名称 后会附加一个值 ，顺序号是一个单调递增的计数 器，由父节点维护</li></ul></li><li>创建永久节点 <ul><li><code>create /sanguo &quot;diaochan&quot;</code></li></ul></li><li>获得节点值 <ul><li><code>get -s /sanguo</code></li></ul></li><li>创建带序号的永久节点 <ul><li><code>create -s /sanguo/weiguo/zhangliao &quot;zhangliao&quot;</code></li></ul></li><li>创建短暂节点 <ul><li><code>create -e /sanguo/wuguo &quot;zhouyu&quot;</code></li></ul></li><li>退出客户端 <ul><li><code>quit</code></li></ul></li><li>修改节点数据值 <ul><li><code>set /sanguo/weiguo &quot;simayi&quot;</code></li></ul></li></ul><h4 id="_3-2-4-监听器原理" tabindex="-1"><a class="header-anchor" href="#_3-2-4-监听器原理" aria-hidden="true">#</a> 3.2.4 监听器原理</h4><ul><li>ch3:监听器的原理是怎样的 <ul><li><img src="https://img.shiqi-lu.tech/20211109172302.png" alt=""></li><li>1.首先要有一个main()线程</li><li>2.在main线程中创建Zookeeper客户端，这时就会创建两个线程，一个负责网络连接通信(connet) ，一个负责监听(listener)</li><li>3.通过conec线程将注册的监听事件发送给Zookeeper</li><li>4.在Zookeeper的注册监听器列表中将注册的监听事件添加到列表中</li><li>5.Zookeeper监听到有 数据或路径变化，就会将这个消息发送给listener线程</li><li>6.listener线程内部调用了process()方法</li></ul></li><li>ch3:注册监听/sanguo节点数据值变化 <ul><li><code>get -w /sanguo</code></li><li>注册一次，只能监听一次。想再次监听，需要再次注册</li></ul></li><li>ch3:注册监听/sanguo节点的子节点变化监听（路径变化） <ul><li><code>ls -w /sanguo</code></li></ul></li></ul><h4 id="_3-2-5-节点删除与查看" tabindex="-1"><a class="header-anchor" href="#_3-2-5-节点删除与查看" aria-hidden="true">#</a> 3.2.5 节点删除与查看</h4><ul><li>ch3:删除节点 <ul><li><code>delete /sanguo/jin</code></li></ul></li><li>ch3:递归删除节点 <ul><li><code>deleteall /sanguo/shuguo</code></li></ul></li><li>ch3:查看节点状态 <ul><li><code>stat /sanguo</code></li></ul></li></ul><h3 id="_3-3-客户端-api-操作" tabindex="-1"><a class="header-anchor" href="#_3-3-客户端-api-操作" aria-hidden="true">#</a> 3.3 客户端 API 操作</h3><h3 id="_3-4-客户端向服务端写数据流程" tabindex="-1"><a class="header-anchor" href="#_3-4-客户端向服务端写数据流程" aria-hidden="true">#</a> 3.4 客户端向服务端写数据流程</h3><ul><li>写流程之写入请求直接发送给Leader节点 <ul><li><img src="https://img.shiqi-lu.tech/20211109173500.png" alt=""></li></ul></li><li>写流程之写入请求发送给follower节点 <ul><li><img src="https://img.shiqi-lu.tech/20211109173527.png" alt=""></li></ul></li></ul><h2 id="第-4-章-服务器动态上下线监听案例" tabindex="-1"><a class="header-anchor" href="#第-4-章-服务器动态上下线监听案例" aria-hidden="true">#</a> 第 4 章 服务器动态上下线监听案例</h2><h2 id="第-5-章-zookeeper-分布式锁案例" tabindex="-1"><a class="header-anchor" href="#第-5-章-zookeeper-分布式锁案例" aria-hidden="true">#</a> 第 5 章 ZooKeeper 分布式锁案例</h2><h2 id="第-6-章-企业面试真题" tabindex="-1"><a class="header-anchor" href="#第-6-章-企业面试真题" aria-hidden="true">#</a> 第 6 章 企业面试真题</h2><ul><li>ch6:Zookeeper 的选举机制？ <ul><li>半数机制，超过半数的投票通过，即通过。</li><li>第一次启动选举规则： <ul><li>投票过半数时，服务器 id 大的胜出</li></ul></li><li>第二次启动选举规则： <ul><li>1.EPOCH 大的直接胜出</li><li>2.EPOCH 相同，事务 id 大的胜出</li><li>3.事务 id 相同，服务器 id 大的胜出</li></ul></li></ul></li><li>ch6:生产集群安装多少 zk 合适？ <ul><li>安装奇数台</li><li>生产经验： <ul><li>10 台服务器：3 台 zk</li><li>20 台服务器：5 台 zk</li><li>100 台服务器：11 台 zk</li><li>200 台服务器：11 台 zk</li></ul></li><li>服务器台数多：好处，提高可靠性；坏处：提高通信延时</li></ul></li></ul>`,39),d=[o];function r(s,u){return i(),l("div",null,d)}const t=e(n,[["render",r],["__file","zookeeper-starter.html.vue"]]);export{t as default};
